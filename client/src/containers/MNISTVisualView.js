/*
  MNIST MACHINE LEARNING VISUALIZATION
*/
import React, { Component } from 'react';
import { connect } from 'react-redux';
import _ from 'lodash';

const Synaptic = require('synaptic');
const Network = Synaptic.Network;

class MNISTVisualView extends Component {
  constructor(props) {
    super(props);
    this.chart = null;
    this.maxWidth = 700;
    this.maxHeight = 500;
    this.dataSet = [];
    this.testingData = [{"input":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.196,0.925,1,0.486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.208,0.906,0.992,0.992,0.42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.035,0.757,0.992,0.992,0.902,0.016,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.027,0.612,0.992,0.992,0.584,0.141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.094,0.992,0.992,0.745,0.031,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.686,0.992,0.992,0.282,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.482,0.992,0.992,0.541,0.012,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.039,0.957,0.992,0.902,0.133,0,0.035,0.094,0.09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.71,0.992,0.976,0.482,0,0.271,0.765,0.992,0.976,0.573,0.059,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.082,0.906,0.992,0.792,0,0.275,0.925,0.992,0.992,0.992,0.992,0.667,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.545,0.992,0.835,0.102,0.051,0.784,0.992,0.992,0.718,0.988,0.992,0.863,0.086,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.282,0.992,0.992,0.506,0,0.337,0.992,0.992,0.506,0.016,0.412,0.992,0.992,0.275,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.282,0.992,0.992,0.302,0.086,0.961,0.992,0.718,0.016,0,0.008,0.412,0.992,0.275,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.518,0.992,0.992,0.043,0.094,0.992,0.992,0.455,0,0,0.004,0.588,0.992,0.275,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.741,0.992,0.945,0.039,0.094,0.992,0.992,0.231,0,0,0.322,0.992,0.831,0.118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.741,0.992,0.576,0,0.094,0.992,0.992,0.588,0.118,0.173,0.816,0.831,0.122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.741,0.992,0.682,0.012,0.027,0.725,0.992,0.992,0.89,0.969,0.722,0.118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.588,0.992,0.992,0.569,0.373,0.918,0.992,0.992,0.992,0.494,0.004,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.282,0.992,0.992,0.992,0.992,0.992,0.992,0.992,0.663,0.055,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.447,0.941,0.992,0.992,0.918,0.529,0.173,0.012,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"output":[0,0,0,0,0,0,1,0,0,0]},{"input":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.102,0.941,0.282,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.098,0.933,0.816,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.82,0.886,0.055,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.82,0.996,0.169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.686,0.996,0.502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.247,0.996,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.42,0.996,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.345,0.996,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.216,0.996,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.494,0.996,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.494,0.996,0.741,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.663,0.996,0.475,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.82,0.996,0.757,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.82,0.996,0.435,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.922,0.996,0.145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.537,0.996,0.89,0.063,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.804,1,0.725,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.804,0.996,0.49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.804,0.996,0.49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.435,0.831,0.169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"output":[0,1,0,0,0,0,0,0,0,0]},{"input":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.027,0.027,0.016,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.051,0.471,0.537,0.729,0.996,0.996,0.533,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.208,0.561,0.702,0.996,0.996,0.996,1,0.996,0.996,0.757,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.098,0.196,0.584,0.686,0.996,0.996,0.996,0.996,0.996,0.996,1,0.996,0.996,0.424,0,0,0,0,0,0,0,0,0,0,0,0,0.376,0.667,0.996,0.996,0.996,0.996,0.996,0.961,0.718,0.388,0.388,0.576,0.988,0.996,0.769,0.012,0,0,0,0,0,0,0,0,0.016,0.569,0.635,0.635,0.859,0.996,0.996,0.996,0.965,0.729,0.365,0.259,0,0,0,0.49,0.965,0.996,0.467,0.008,0,0,0,0,0,0,0,0,0.341,0.843,0.996,0.996,0.996,0.996,0.8,0.341,0.267,0,0,0,0,0,0.18,0.773,0.996,0.706,0.184,0,0,0,0,0,0,0,0,0,0.659,0.996,0.612,0.314,0.314,0.314,0.11,0,0,0,0,0,0,0,0.494,0.961,1,0.224,0,0,0,0,0,0,0,0,0,0,0.008,0.29,0.129,0,0,0,0,0,0,0,0,0,0,0.169,0.784,0.996,0.357,0.024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.612,0.961,0.804,0.051,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.486,0.957,0.996,0.333,0.024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.231,0.851,0.996,0.475,0.027,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.69,0.996,0.996,0.239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.631,0.961,0.843,0.227,0.027,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.212,0.965,0.996,0.725,0.027,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.486,0.996,0.996,0.251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.204,0.929,0.996,0.494,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.463,0.996,0.996,0.467,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.463,0.996,0.996,0.239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.008,0.024,0.024,0.008,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"output":[0,0,0,0,0,0,0,1,0,0]},{"input":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.765,0.996,0.996,0.996,0.996,0.996,1,0.239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.024,0.749,0.992,0.992,0.992,0.992,0.992,0.992,0.992,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.102,0.745,0.992,0.992,0.992,0.992,0.941,0.749,0.949,0.992,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.733,0.992,0.992,0.992,0.992,0.992,0.784,0,0.827,0.992,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.259,0.992,0.992,0.992,0.992,0.945,0.82,0.173,0.09,0.855,0.992,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.486,0.992,0.992,0.992,0.992,0.992,0.714,0,0,0.514,0.992,0.992,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149,0.851,0.992,0.992,0.957,0.435,0.145,0,0,0.514,0.992,0.992,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.486,0.992,0.992,0.992,0.647,0,0,0,0.086,0.714,0.992,0.992,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.486,0.992,0.992,0.941,0.176,0,0,0,0.208,0.992,0.992,0.976,0.227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.063,0.659,0.992,0.847,0.176,0,0,0,0,0.208,0.992,0.992,0.541,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.624,0.992,0.992,0.576,0,0,0,0,0,0.208,0.992,0.992,0.541,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.533,0.988,0.992,0.89,0.02,0,0,0,0,0,0.208,0.992,0.953,0.396,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.549,0.992,0.992,0.486,0,0,0,0,0,0,0.612,0.992,0.855,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.051,0.643,0.992,0.557,0.02,0,0,0,0,0,0.125,0.914,0.992,0.855,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.243,0.992,0.992,0.51,0,0,0,0,0,0.145,0.796,0.992,0.992,0.498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.243,0.992,0.992,0.576,0.141,0.141,0.141,0.141,0.592,0.871,0.992,0.961,0.498,0.031,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.133,0.792,0.992,0.992,0.992,0.992,0.992,0.992,0.992,0.992,0.992,0.784,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.549,0.992,0.992,0.992,0.992,0.992,0.992,0.992,0.973,0.922,0.255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.341,0.678,0.992,0.992,0.992,0.992,0.992,0.992,0.714,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.055,0.306,0.376,0.992,0.992,0.992,0.537,0.22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"output":[1,0,0,0,0,0,0,0,0,0]}]
  }

  componentDidMount() {
    this.chart = d3.select('#visualizer').append('canvas')
      .attr('width', this.maxWidth)
      .attr('height', this.maxHeight);

    this.context = this.chart.node().getContext('2d');

    // Create an in-memory element to hold the data
    this.detachedContainer = document.createElement('custom');

    // Create a D3 selection for the detached container
    this.dataContainer = d3.select(this.detachedContainer);

    this.drawChart(this.props.ANNJobPoolReady);
  }

  componentDidUpdate() {
    this.drawChart(this.props.ANNJobPoolReady);

    if (this.props.updatedNetwork.length !== 0) {
      this.testNetwork(this.props.updatedNetwork);
    }
  }

  drawChart (dataSet) {
    // Bind data for visualization
    const dataBinding = this.dataContainer.selectAll('custom')
      .data(dataSet, (d) => { return d; });

    // UPDATE
    dataBinding
      .classed('rect', true)
      .attr('opacity', 0.5)
      .attr('x', (d, i) => {
        return 10 + (28 * (i % 10)) + (1 * (i % 10));
      })
      .attr('y', (d, i) => {
        return 75 + (28 * Math.floor(i / 10)) + Math.floor(1 * (i / 10));
      })
      .attr('num', (d) => { return d; })

    // ENTER
    dataBinding.enter()
      .append('custom')
      .classed('rect', true)
      .attr('x', (d, i) => {
        return 10 + (28 * (i % 10)) + (1 * (i % 10));
      })
      .attr('y', (d, i) => {
        return 75 + (28 * Math.floor(i / 10)) + Math.floor(1 * (i / 10));
      })
      .attr('num', (d) => { return d; })

    // EXIT
    dataBinding.exit()
      .remove();

    this.drawCanvas(dataBinding);
    this.drawTestingData();
  }

  drawCanvas() {
    // clear the existing canvas
    this.context.fillStyle = '#fff';
    this.context.rect(0, 0, this.chart.attr('width'), this.chart.attr('height'));
    this.context.fill();

    // Draw text on the screen
    this.context.font = '24px Arial';
    this.context.fillText('Data Under Analysis', 50, 30);
    this.context.fillText('Testing Set', 450, 30);

    const elements = this.dataContainer.selectAll("custom.rect");

    // Draw each image
    // context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);
    // s- is the coordinate to start clipping
    const self = this;

    elements.each(function(d) {
      const node = d3.select(this);
      const image = new Image();
      const randomY = Math.floor( Math.random() * 10 );

      image.onload = () => {
        self.context.drawImage(image, node.attr('num') * 28 + 1 * node.attr('num'), 0 + randomY * 28 + randomY * 1, 28, 28, node.attr('x'), node.attr('y'), 28, 28);        
      }
      image.src = '../../assets/mnist.png';
    });
  }

  drawTestingData() {
    const self = this;
    const trainingNumbers = this.testingData.map( (item) => {
      return item.output.indexOf(1);
    });

    trainingNumbers.forEach( (num, i) => {
      const image = new Image();

      image.onload = () => {
        self.context.drawImage(image, num * 28 + num * 1, num * 28 + num * 1, 28, 28, 400 + i * 28 + i * 10, 75, 28, 28);
      }
      image.src = '../../assets/mnist.png';
    });
  }

  drawTestingResults(results) {
    const self = this;

    results.forEach( (num, i) => {
      const image = new Image();

      image.onload = () => {
        self.context.drawImage(image, num * 28 + num * 1, num * 28 + num * 1, 28, 28, 400 + i * 28 + i * 10, 175, 28, 28);
      }
      image.src = '../../assets/mnist.png';
    });
  }

  testNetwork(updatedNetwork) {  
    updatedNetwork = Network.fromJSON(updatedNetwork.trainedNetwork);
    const testResults = [];
    console.log(updatedNetwork);
    this.testingData.forEach( (test) => {
      const result = updatedNetwork.activate(test.input);
      console.log('testing', test.input);
      const guess = _.max(result);
      console.log('guess:', guess);
      console.log('number:', result.indexOf(guess));
      testResults.push(result.indexOf(guess));
    });
    this.drawTestingResults(testResults);
    console.log('Predictions from network:', testResults);
  }

  render() {
    return (
      <div id="visualizer"></div>
    );
  }
}

function mapStateToProps(state) {
  return {
    results: state.updateResults,
    project: state.selectedProject,
    ANNJobPoolReady: state.ANNJobPoolReady,
    updatedNetwork: state.updatedNetwork
  };
}

export default connect(mapStateToProps)(MNISTVisualView);